#!/usr/bin/env python3
"""This code is intended to be a stripped down http server
based on the python3 stdlib http.server module.

Intended for study purposes only, not suitable for production.
"""
import email.utils
import mimetypes
import os
import shutil
import socket
import socketserver
import sys
import time


from http import HTTPStatus


class HTTPServer(socketserver.TCPServer):
    """Based off Python3's HTTPServer in the http.server module"""

    allow_reuse_address = 1  # removing this makes address block on second run

    def server_bind(self):
        """Override server_bind to store the server name."""
        socketserver.TCPServer.server_bind(self)
        host, port = self.server_address[:2]
        self.server_name = socket.getfqdn(host)
        self.server_port = port


class ThreadingHTTPServer(socketserver.ThreadingMixIn, HTTPServer):
    """Now with more threads!"""
    daemon_threads = True


class BaseHTTPRequestHandler(socketserver.StreamRequestHandler):
    """Handles an HTTP connection's requests"""

    responses = {
        status: status.phrase
        for status in HTTPStatus.__members__.values()
    }

    def handle(self):
        """Handle a single HTTP request.
        """
        try:
            raw_requestline = self.rfile.readline(4097)
            if len(raw_requestline) > 4096:
                self.send_error(
                    HTTPStatus.REQUEST_URI_TOO_LONG, "Request URI too long")
                return
            if not raw_requestline:
                return

            words = (str(raw_requestline, 'iso-8859-1')
                     .rstrip('\r\n')
                     .split())
            command, path = words[:2]

            mname = 'do_' + command
            if not hasattr(self, mname):
                self.send_error(
                    HTTPStatus.NOT_IMPLEMENTED,
                    f"Unsupported method {command.upper()}")
                return
            method = getattr(self, mname)
            method(path)
            self.wfile.flush()
        except socket.timeout:
            return

    def send_error(self, code, message):
        """Send error reply"""
        self.send_response(code, message)
        self.send_header('Connection', 'close')
        self.end_headers()

    def send_response(self, code, message=None):
        """send the response line"""
        if message is None:
            if code in self.responses:
                message = self.responses[code]
            else:
                message = ''

        if not hasattr(self, '_headers_buffer'):
            self._headers_buffer = []
        self._headers_buffer.append(
            f"HTTP/1.1 {code} {message}\r\n".encode('latin-1', 'strict'))
        self.send_header('Server', 'Simpler HTTPServer 0.1')
        self.send_header('Date', email.utils.formatdate(
            time.time(), usegmt=True))

    def send_header(self, keyword, value):
        if not hasattr(self, '_headers_buffer'):
            self._headers_buffer = []
        self._headers_buffer.append(
            f"{keyword}: {value}\r\n".encode('latin-1', 'strict'))

    def end_headers(self):
        self._headers_buffer.append(b"\r\n")
        self.flush_headers()

    def flush_headers(self):
        if hasattr(self, '_headers_buffer'):
            self.wfile.write(b"".join(self._headers_buffer))
            self._headers_buffer = []


class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    directory = os.getcwd()

    def do_GET(self, path):
        path = os.path.join(self.directory, path.lstrip('/'))
        if os.path.isdir(path):
            path = os.path.join(path, 'index.html')
        if os.path.isfile(path):
            mime, _ = mimetypes.guess_type(path)
            with open(path, 'rb') as file:
                fstat = os.fstat(file.fileno())
                self.send_response(HTTPStatus.OK)
                self.send_header("Content-Length", str(fstat[6]))
                if mime is not None:
                    self.send_header("Mime-Type", mime)
                self.end_headers()
                try:
                    shutil.copyfileobj(file, self.wfile)
                finally:
                    pass  # try/finally ensures file object context closes
        else:
            self.send_error(HTTPStatus.NOT_FOUND, 'File not found')


def _get_best_family(port):
    infos = socket.getaddrinfo(
        None,
        port,
        type=socket.SOCK_STREAM,
        flags=socket.AI_PASSIVE,
    )
    family, _, _, _, sockaddr = next(iter(infos))
    return family, sockaddr


def run(port=6000):
    ThreadingHTTPServer.address_family, addr = _get_best_family(port)

    with ThreadingHTTPServer(addr, SimpleHTTPRequestHandler) as httpd:
        host, port = httpd.socket.getsockname()[:2]
        print(
            f"Serving HTTP on {host} port {port} "
            f"(http://{host}:{port}/) ..."
        )
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nKeyboard interrupt received, exiting.")
            sys.exit(0)


if __name__ == '__main__':
    port = input("Enter port to run on: ")
    run(int(port))
